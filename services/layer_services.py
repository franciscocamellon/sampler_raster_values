# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LayerService
                                 A QGIS plugin
 Amostra valores de pixels a partir de rasters e preenche atributos de
 shapefiles no QGIS.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-27
        copyright            : (C) 2023 by Francisco Camello
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francisco Camello'
__date__ = '2023-10-27'
__copyright__ = '(C) 2023 by Francisco Camello'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core.additions.edit import edit
from qgis.core import QgsField, QgsPointXY, QgsRasterLayer


class LayerService:

    def __init__(self):
        pass

    @staticmethod
    def addNewField(layer, fieldName, fieldType):
        with edit(layer):
            layer.addAttribute(QgsField(fieldName, fieldType))
            layer.updateFields()

    @staticmethod
    def extractValueFromRaster(raster, feature, fieldName, newFieldName):
        geometry = feature.geometry()
        observation_point = geometry.asPoint()
        x, y = observation_point.x(), observation_point.y()

        pixel_value, success = raster.dataProvider().sample(QgsPointXY(x, y), 1)

        if success:
            if newFieldName != 'SAMPLE':
                feature[newFieldName] = pixel_value
            else:
                feature[fieldName] = pixel_value

        return feature

    @staticmethod
    def updateFeature(iface, layer, featureList, feedback):
        iface.setActiveLayer(layer)
        layer.startEditing()
        layer.beginEditCommand('Adding new feature')

        total = 100.0 / len(featureList) if len(featureList) else 0

        for current, feature in enumerate(featureList):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            # Update a feature in the layer
            layer.updateFeature(feature)

            # Update the progress bar
            feedback.setProgress(int(current * total))

        layer.triggerRepaint()
        layer.endEditCommand()

    def createNetcdfRaster(self, netcdfInt, rasterName, rasterUri):
        netcdfVariable = self.retrieveNetcdfVariable(netcdfInt)
        uri = f'NETCDF:"{rasterUri}":{netcdfVariable}'
        return QgsRasterLayer(uri, rasterName)

    @staticmethod
    def retrieveNetcdfVariable(netcdfVariable):
        if netcdfVariable == 0:
            return 'chlor_a'
        else:
            return 'sst'

    @staticmethod
    def getDateFromFeature(feature, dateField):
        data_field = feature[dateField]
        return data_field.toPyDate()
