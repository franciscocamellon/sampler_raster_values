# -*- coding: utf-8 -*-

"""
/***************************************************************************
 MessageService
                                 A QGIS plugin
 Amostra valores de pixels a partir de rasters e preenche atributos no QGIS.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-27
        copyright            : (C) 2023 by Francisco Camello
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francisco Camello'
__date__ = '2023-10-27'
__copyright__ = '(C) 2023 by CamellOnCase'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import Qgis
from qgis.gui import QgsMessageBar
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt.QtCore import QCoreApplication

MESSAGE_TYPE = {0: QMessageBox.NoIcon, 1: QMessageBox.Question, 2: QMessageBox.Information,
                3: QMessageBox.Warning, 4: QMessageBox.Critical}


class MessageService:

    def __init__(self):
        # self.iface = iface
        self.messageBox = QMessageBox()
        self.messageType = MESSAGE_TYPE

    def showMessageBox(self, text, icon, title=None):
        if title is not None:
            self.messageBox.setWindowTitle(self.tr(title))
        self.messageBox.setIcon(self.getMessageType(icon))
        self.messageBox.setText(self.tr(text))
        self.messageBox.setStandardButtons(QMessageBox.Ignore | QMessageBox.Cancel)
        self.messageBox.setDefaultButton(QMessageBox.Cancel)
        self.messageBox.exec_()

    def showCriticalMessage(self, title, text):
        return self.messageBox.critical(None, title, text)

    @staticmethod
    def getMessageType(messageType):

        if messageType in MESSAGE_TYPE:
            return MESSAGE_TYPE[messageType]

    def show_message(self, message, message_type='Info'):
        message_level = 0

        if message_type == 'Error':
            message_level = 2
        elif message_type == 'Warning':
            message_level = 1
        elif message_type == 'Success':
            message_level = 3

        # self.iface.messageBar().pushMessage(message_type, message, level=message_level, duration=5)

    @staticmethod
    def tr(string):
        return QCoreApplication.translate('MessageService', string)
