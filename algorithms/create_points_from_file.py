# -*- coding: utf-8 -*-
"""
/***************************************************************************
 CreatePointsFromFileAlgorithm
                                 A QGIS plugin
 Amostra valores de pixels a partir de rasters e preenche atributos no QGIS.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-10-27
        copyright            : (C) 2023 by Francisco Camello
        email                : camelloncase@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Francisco Camello'
__date__ = '2023-11-08'
__copyright__ = '(C) 2023 by CamellOnCase'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import csv
import pandas as pd

from qgis.PyQt.Qt import QVariant
from qgis.utils import iface
from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import QgsVectorLayer, QgsField, QgsFeature, QgsGeometry, QgsPointXY
from qgis.core import (QgsProcessing, QgsProcessingParameterEnum, QgsProcessingParameterString,
                       QgsProcessingOutputVectorLayer, QgsProcessingException,
                       QgsProcessingParameterVectorLayer, QgsProcessingParameterFile,
                       QgsProcessingAlgorithm, QgsProcessingParameterField)

from ..services.layer_services import LayerService
from ..services.system_service import SystemService


class CreatePointsFromFileAlgorithm(QgsProcessingAlgorithm):

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT_FILE = 'INPUT_FILE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT_FILE,
                self.tr('Points spreadsheet'),
                behavior=QgsProcessingParameterFile.File
            )
        )

        self.addOutput(
            QgsProcessingOutputVectorLayer(
                self.OUTPUT,
                self.tr("Original layer without empty geometries")
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        layerService = LayerService()
        systemService = SystemService()

        inputFile = self.parameterAsFile(parameters, self.INPUT_FILE, context)
        print(inputFile)

        # Replace 'your_file.xls' with the path to your XLS file
        xls_file = 'your_file.xls'

        # Read the XLS file into a DataFrame
        pointDataFrame = pd.read_excel(inputFile)
        d = pointDataFrame.dtypes.to_dict()


        fields = layerService.createFields(pointDataFrame.dtypes.to_dict())
        layer = QgsVectorLayer("Point", "MyMemoryLayer", "memory")
        layer.dataProvider().addAttributes(fields)

        df = pointDataFrame.to_dict(orient='records')
        features = []
        for point in df:
            feature = QgsFeature()
            feature.setAttributes([point['id'], "Feature 1"])
            feature.setAttributes([point['Date'], "Feature 1"])
            feature.setAttributes([point['Latitude'], "Feature 1"])
            feature.setAttributes([point['Longitude'], "Feature 1"])
            feature.setAttributes([point['Depht'], "Feature 1"])
            feature.setAttributes([point['8Day_chlor_a'], "Feature 1"])
            feature.setAttributes([point['8Day_sst'], "Feature 1"])
            feature.setAttributes([point['Monthly_sst'], "Feature 1"])
            feature.setAttributes([point['Monthly_chlor'], "Feature 1"])
            feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(0, 0)))


            # # Start editing the layer

            #
            # # Add features to the layer

            # layer.dataProvider().addFeatures([feature])
            #
            # feature = QgsFeature()
            # feature.setAttributes([2, "Feature 2"])
            # feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(1, 1)))


            print(point)
        layer.startEditing()
        layer.dataProvider().addFeatures(features)

        # Commit changes and stop editing
        layer.commitChanges()



        return {self.OUTPUT: None}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Create Points from File'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return ''

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return CreatePointsFromFileAlgorithm()
